// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Put your code here:

    Mux16(a = instruction, b = aluOutput, sel = instruction[15], out = instructionAfterMux16);
    Not(in = instruction[15], out = not15);

    // carregando para o registrador A se a instrução for A ou se a instrução for C com conjunto de bits d1 
    Or(a = not15, b = instruction[5], out = aLoad);
    ARegister(in = instructionAfterMux16, load = aLoad, out = aRegisterOut, out[0..14] = addressM);

    And(a = instruction[15], b = instruction[4], out = dLoad);
    DRegister(in = aluOutput, load = dLoad, out = dRegisterOut);

    Mux16(a = aRegisterOut, b = inM, sel = instruction[12], out = aluInput);

    // a saída da ALU não é usada com a instrução A, impedindo bits de status
    // se intrução A, o bit de status não afeta o chip na CPU bc é bloqueado 
    And(a = instruction[11], b = instruction[15], out = out11);
    And(a = instruction[10], b = instruction[15], out = out10);
    And(a = instruction[9], b = instruction[15], out = out9);
    And(a = instruction[8], b = instruction[15], out = out8);
    And(a = instruction[7], b = instruction[15], out = out7);
    And(a = instruction[6], b = instruction[15], out = out6);

    ALU(x = dRegisterOut, y = aluInput, zx = out11, nx = out10, zy = out9, ny = out8, f = out7, no = out6,out = outM, out = aluOutput, zr = equalZero, ng = lessThanZero);

    And(a = instruction[15], b = instruction[3], out = writeM);

    Or(a = equalZero, b = lessThanZero, out = lessThanOrEqual);
    Not(in = lessThanOrEqual, out = greaterThan);

    // verificar se os bits j são instrução C para saltar
    And(a = instruction[0], b = instruction[15], out = j0);
    And(a = instruction[1], b = instruction[15], out = j1);
    And(a = instruction[2], b = instruction[15], out = j2);

    // lógica do salto para pc
    And(a = greaterThan, b = j0, out = JGT); // out > 0
    And(a = equalZero, b = j1, out = JEQ); // out == 0
    And(a = lessThanZero, b = j2, out = JLT); // out < 0
    Or(a = JLT, b = JEQ, out = JLE);
    Or(a = JLE, b = JGT, out = JMP);
    And(a = instruction[15], b = JMP, out = theLoad);

    Not(in = theLoad, out = theInc);

    PC(in = aRegisterOut, load = theLoad, inc = theInc, reset = reset, out[0..14] = pc);
}