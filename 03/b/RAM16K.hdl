// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    // Put your code here:

	Not(in=load,out=notload);
	Or(a=load,b=notload,out=one);

	DMux4Way(in=one,a=r0,b=r1,c=r2,d=r3,sel=address[0..1]);

	// flags
	And(a=load,b=r0,out=loadr0);
	And(a=load,b=r1,out=loadr1);
	And(a=load,b=r2,out=loadr2);
	And(a=load,b=r3,out=loadr3);

	// RAM's16K
	RAM4K(in=regin0,out=reg0,load=r0,address=address[2..13]);
	RAM4K(in=regin1,out=reg1,load=r1,address=address[2..13]);
	RAM4K(in=regin2,out=reg2,load=r2,address=address[2..13]);
	RAM4K(in=regin3,out=reg3,load=r3,address=address[2..13]);
	Mux16(a=reg0,b=in,sel=loadr0,out=regin0);
	Mux16(a=reg1,b=in,sel=loadr1,out=regin1);
	Mux16(a=reg2,b=in,sel=loadr2,out=regin2);
	Mux16(a=reg3,b=in,sel=loadr3,out=regin3);

	// saída
	Mux4Way16(a=reg0,b=reg1,c=reg2,d=reg3,sel=address[0..1],out=out);

}